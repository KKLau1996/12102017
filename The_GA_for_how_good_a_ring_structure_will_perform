#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Oct 13 18:35:05 2017

@author: laukaki
"""
"""
First, a sinusoidal time series is obtained by C1 * sin(2*pi*w*t) + C2 * cos(2*pi*w*t), where C1, C2 and w are randomly generated. 
While 0<t<1, for w < 1/4, the time series is considered as low frequency; for w>2 , the series is considered high frequency.

Assume a series with 1/4<w<2 is generated randomly. We don't know anything about this time series except it is sinusoidal.

There will be a ring of players (50 players) investing on this time series, playing each round every t += 0.1. 
Each of the players can choose between a high risk portfolio or a low risk portfolio in each round. 
A high risk portfolio means the player invest 0.9 of their total capital in the stock and 0.1, denoted as (0.9, 0.1), a low risk portfolio is (0.1, 0.9) instead. 
After one round of the game, each player can know the portfolio and the capital change of themselves and their two neighbors. 
Then thay can choose between "follow the winner" (FW) and "avoid the loser" (AL) strategy. 
Follow the winner refers to following the portfolio of the rank 1 player in the last round. 
Avoid the loser refers to staying unchanged unless the player lose the most in the last round, then they will switch to another portfolio (high to low, or low to high).

Using exhausive search, the best portfolio sequence of the ten rounds of a player can be founded. 
This is the best sequence players can have which can give them optimal results. 
The number of possible combination is 2^10. Then we can use GA to find the best sequence of combination of FW/AL strategy of the 50 players. 
The number of possible combination is (2^50)^10 for 10 rounds. 
From the difference between the two (They may or may not be the same), we can find how good a ring structure can be in optimizing the outcome.

If time is allowed, we can also work on low frequency and high frequency time series and see the result.
 
Research other than ring structure and the stochastic mixture of AL and FW will be studied later on.
"""

import numpy as np
import itertools
from pylab import imshow, plot,show, ylim, xlabel, ylabel, subplots, legend
import random

TOTAL_TIME = 16
NUM_OF_PLAYER = 50

def number_of_stock(t, caps, portfolio_list, stock_h, stock_l, greed_fac, NUM_OF_PLAYER):
     """
     Calculate the number of stocks (H and L) at time t for each agents
     Args:
         t (int): time step
         caps (list): capitals[time][agent]
         portfolio_list (list)
         stock_h (list): stock price (H)
         stock_l (list): stock price (L)
         greed_fac (list): greedy_factor[time][agent]
 
     Returns:
         number_of_stocks (tuple)
 
     """
    number_of_stock_h = []
    number_of_stock_l = []
  
    # iterate for each agent
    for i in range(0, NUM_OF_PLAYER):
       # if the greedy factor at time t is 0, choose a low risk strategy,
       # otherwise choose a high risk strategy
        if GreedFactor[t][i] == 0:
            portfolio = portfolio_list[0]
        else: 
            portfolio = portfolio_list[1]
        number_of_stock_h.append(caps[t][i] * portfolio[0] / stock_h[T])
        number_of_stock_l.append(caps[t][i] * portfolio[1] / stock_h[T])
    return number_of_stock_h, number_of_stock_l
    
def get_capital(t, cap, portfolio_list, stock_h, stock_l, greed_fac, NUM_OF_PLAYER):
 """
 Calculate the capital at time t for each agent
     Args:
         t (int): time step
         cap (list): capitals[time][agent]
         portfolio_list (list)
         stock_h (list): stock price (H)
         stock_l (list): stock price (L)
         greed_fac (list): greedy_factor[time][agent]
 
     Returns:
         cap_at_time_t (list)
  """
    cap_at_time_t = []

    for i in range(0, NUM_OF_PLAYER):
        cap_from_h = stock_h[t] * number_of_stock(t - 1, cap, portfolio_list, stock_h, stock_l, greed_fac, NUM_OF_PLAYER)[0][i]
        cap_from_l = stock_l[t] * number_of_stock(t - 1, cap, portfolio_list, stock_h, stock_l, greed_fac, NUM_OF_PLAYER)[1][i]
        cap_at_time_t.append(cap_from_h + cap_from_l)
       
    return cap_at_time_t
    
def memory_of_prevoius_round(t, numero_of_agent, greed_fac, amount_win, connectivity):
    """
    Args:
        t (int): time step
        numero_of_agent (int): the numero of agent using this function. From 0 to 49.
        greed_fac (list): greedy_factor[time][agent]
        amount_win (list): amount_of_the_agent_wins[time][agent]
        connectivity (int): amount of agents connected to the agent on each (left or right) side
        
    Returns:
        information_the_player_is_accessed(list)
    """
    L = list(zip(amount_win[t], greed_fac[t-1]))
    information_the_player_is_accessed = [L[x % len(L)] for x in range(i-connectivity, i+connectivity+1)]

    return information_the_player_is_accessed
    
def FW(information_the_player_is_accessed, connectivity):
     """
    Args:
        information_the_player_is_accessed(list)
        
    Returns:
        portfolio_next_round(tuple): (amount_win of winner, greed_fac of winner)
    """
    winner = max(information_the_player_is_accessed)
    portfolio_next_round = winner[connectivity]
    return portfolio_next_round

def AL(information_the_player_is_accessed, connectivity):
    loser = min(information_the_player_is_accessed)
    if information_the_player_is_accessed[connectivity] == loser:
        if information_the_player_is_accessed[connectivity][1] == 0:
            portfolio_next_round = 1
        if information_the_player_is_accessed[connectivity][1] == 1:
            portfolio_next_round = 0
    else:
        portfolio_next_round = information_the_player_is_accessed[connectivity][1]
    return portfolio_next_round

def StockH(T):
#    C1 = np.random.random()
    C1 = 0.6713081033987339
    print("C1 is:")
    print(C1)
#    C2 = np.random.random()
    C2 = 0.3863530740707609
    print("C2 is:")
    print(C2)
#    wlist = linspace(5, 10, 100)
#    w = np.random.choice(wlist)
    w = 6.81818181818
    print("w is:")
    print(w)
    StockH = [2 + C1*np.sin(w*t/15) + C2*np.cos(w*t/15) for t in T]
#    StockH = [1 + t for t in T]
    return StockH

def TotalC(Clist):
    TotalC = []
    for x in Clist:
        Total = sum(x)
        TotalC.append(Total)
    return TotalC

"""
The simulation of a group of payer play by FW/AL.
Strategy size: [[Size of 50]*(number of index of T)]
"""
def groupSimulation(T, Stock, StockL, Strategy, Porfoliolist, Connect):
    C = [[100.0]*50]
    GreedFactor = [[0, 1]*25]
    Winhowmuch = []
    Winhowmuch.append([0]*50)
    
    for t in T[1:]:
        C.append(getCapital(t, C, Porfoliolist, Stock, StockL, GreedFactor))
        The_value_win = [C[t][i]-C[t-1][i] for i in range(len(C[t-1]))]
        Winhowmuch.append(The_value_win) 
        
        GreedFactor.append([])
        for i in range(0,50):
            memory = Memory(t, i, GreedFactor, Winhowmuch, Connect)
            if Strategy[t][i]=="FW":
                Next = FW(i, memory)
            if Strategy[t][i]=="AL":
                Next = AL(i, memory)
            GreedFactor[t].append(Next)
        
        Z = TotalC(C)
    
    return C, GreedFactor, Z, Strategy

"""
Exhausive search the best sequence functions.
Greed Factor is an 1D list of size 16.
"""

def Exhausive(T, Porfoliolist, Stock, StockL, allPossibleCombination):
    allPossibleResult = []
    for seq in allPossibleCombination:
        GreedFactor = seq
        capitalSeries = playerSimulation(T, Stock, StockL, Porfoliolist, GreedFactor)
        allPossibleResult.append(capitalSeries[-1])
    L = list(zip(allPossibleResult, allPossibleCombination))
    return max(L)

def playerSimulation(T, Stock, StockL, Porfoliolist, GreedFactor):
    C = [100.0]
    
    for t in T[1:]:
        if GreedFactor[t-1] == '0':
            Portfolio = Porfoliolist[0]
        if GreedFactor[t-1] == '1':
            Portfolio = Porfoliolist[1]
        NumberofStockH = C[t-1]*Portfolio[0]/Stock[t-1]
        NumberofStockL = C[t-1]*Portfolio[1]/StockL[t-1]
    
        CH = Stock[t] * NumberofStockH
        CL = StockL[t] * NumberofStockL
        C.append(CH + CL)
    
    return C

"""
crossover: uniform crossover
"""
def crossover(list1, list2):
    for i in range(0, 50):
        for j in range(0, 16):
            a = random.randint(0, 11)
            if a < 5.5:
                list1[j][i] = list2[j][i]
    return list1

#"""
#100 random places (x, y). x, y >= 0 and <= 49.
#"""
#def mutation(list1):
#    n = 0
#    while n > 100:
#        x = random.randint(0, 49)
#        y = random.randint(0, 15)
#        if list1[y][x] == 'FW':
#            list1[y][x] = 'AL'
#        if list1[y][x] == 'AL':
#            list1[y][x] = 'FW'
#        n += 1
#    return list1

"""
Randomly generated a FW/AL list. 16row*50col composed by FW/AL.
"""
def randomFWALlist(T, allPossibleCombination):
    t = 0
    Strategy = []
    for t in T:
        
        StrategyAtT = []
        index = random.randint(0, 65535)
        for i in allPossibleCombination[index]:
            if i == '0':
                StrategyAtT.append('AL')
            if i == '1':
                StrategyAtT.append('FW')
        index = random.randint(0, 65535)
        for i in allPossibleCombination[index]:
            if i == '0':
                StrategyAtT.append('AL')
            if i == '1':
                StrategyAtT.append('FW')
        index = random.randint(0, 65535)
        for i in allPossibleCombination[index]:
            if i == '0':
                StrategyAtT.append('AL')
            if i == '1':
                StrategyAtT.append('FW')
        A = [seq for seq in itertools.product("01", repeat=2)]
        index = random.randint(0, 3)
        for i in A[index]:
            if i == '0':
                StrategyAtT.append('AL')
            if i == '1':
                StrategyAtT.append('FW')
        
        Strategy.append(StrategyAtT)
        t +=1
    
    return Strategy
    

"""
GA functions. Total list is 3D, 20*(FW/AL list). Which means there are 20 chromosomes
each is 16row*50col 2D list, where t = 16 and 50 players.

FW/AL list will become a 16row*50col 2D list, which will be modify using GA.

Uniform crossover will be used. If repeated chromosome is found, delete the repeated chromosome.
Parents are kept unless childrens are better than them.
"""
def eachGeneration(previousList, T, Stock, StockL, Porfoliolist, Connect, allPossibleCombination):    
    
    "Crossover*10"
    Children = []
    PreviousList = tuple(previousList)
    Parents = previousList
#    print(len(previousList))
    
    index = 1
    while index + 1 <= 20:
        indexA = random.randint(0, 20-index)
        ParentsA = Parents.pop(indexA)
        indexB = random.randint(0, 20-(index+1))
        ParentsB = Parents.pop(indexB)
        "If the two parents the same, mutate"
        if ParentsA == ParentsB:
            ParentsB = crossover(ParentsB ,randomFWALlist(T, allPossibleCombination))
        Children.append(crossover(ParentsA, ParentsB))
        index += 2
     
    """
    The following is a failed attempt to remove duplicate of chromosomes.
    """
    NewSeq = list(PreviousList) + Children
#    new_array = np.asarray([tuple(row) for row in NewSeq.reshape(30, 800)])
##    print(new_array)
#    uniques = np.unique(new_array, axis=0)
#    Get = uniques.reshape(len(uniques), 16, 50)
#    NewSeq = np.ndarray.tolist(Get)
    
    while len(NewSeq) < 20:
        NewSeq.append(randomFWALlist(T, allPossibleCombination))
         
    Result = []
    for i in NewSeq:
        simulationResult = groupSimulation(T, Stock, StockL, i, Porfoliolist, Connect)[2][-1]
        Result.append(simulationResult)
#    print(Result)
    
    Sorted = sorted(zip(Result, NewSeq), reverse=True)[:20]
#    print(Sorted)
    SortedNewR, SortedNewSeq = zip(*Sorted)
    SortedNewSeq = list(SortedNewSeq)
#    print(SortedNewSeq)
    
    return SortedNewSeq

"""
If the poplulation unchanged for 3 Generations, reinitialize the population by mutating sequence except best 3.
"""
def reInitialize(newList):
    RestOfList = []
    for i in newList[3:]:
        RestOfList.append(crossover(i ,randomFWALlist(T, allPossibleCombination)))
    List = newList[:3] + RestOfList
    return List
    
"""
Initial setting
"""
Connect = 1
T =[int(t) for t in np.linspace(0, 15, 16)]
Stock = StockH(T)
StockL = [1]*16
Porfoliolist = [(0.1, 0.9), (0.9, 0.1)]
allPossibleCombination = [seq for seq in itertools.product("01", repeat=16)]

"""
Exhausive search the best sequence
"""
Best = Exhausive(T, Porfoliolist, Stock, StockL, allPossibleCombination)
BestSequence = Best[1]
BestResult = Best[0]
BestPath = playerSimulation(T, Stock, StockL, Porfoliolist, BestSequence)

"""
Best possible performance by a ring structure.
"""
Generation = 0
initialList = []
ListRecord = []
for i in range(0, 20):
    initialList.append(randomFWALlist(T, allPossibleCombination))
previousList = initialList
while Generation < 100:
    ListRecord.append(previousList)
#    print(previousList)
    print("The gen:")
    print(Generation)
    newList = eachGeneration(previousList, T, Stock, StockL, Porfoliolist, Connect, allPossibleCombination)
#    print(newList)
    previousList = newList
#    print(newList)   
    
    """
    Try to reinitialise if the population is unchanged for a few generations.
    """
#    if Generation > 10:
#        if newListRecord[-1] == newListRecord[-2] and newListRecord[-2] == newListRecord[-3]:
#            previousList = reInitialize(newList)    
    Generation += 1

Result = []
for i in newList:
    simulationResult = groupSimulation(T, Stock, StockL, i, Porfoliolist, Connect)[2][-1]
    Result.append(simulationResult)
BestGroupStrategy = sorted(zip(Result, newList), reverse=True)[:5]
BestgroupGreed = groupSimulation(T, Stock, StockL, newList[0], Porfoliolist, Connect)[1]

import matplotlib
print(BestgroupGreed)
fig = matplotlib.pyplot.figure()
ax = fig.add_subplot(111)
xlabel("Players")
ylabel("Portfolio")
img = ax.imshow(BestgroupGreed, aspect='auto', cmap=matplotlib.pyplot.cm.gray, interpolation='nearest')
img

"""
Repeat for sin fuction input, from low to high frequency.
"""




